\m4_TLV_version 1d: tl-x.org
\SV
   // This code can be found in: https://github.com/stevehoover/RISC-V_MYTH_Workshop
   
   m4_include_lib(['https://raw.githubusercontent.com/stevehoover/RISC-V_MYTH_Workshop/fb7f86ff81ea48036bfc8da83be17f2ed3260949/tlv_lib/risc-v_shell_lib.tlv'])

\SV
   m4_makerchip_module   // (Expanded in Nav-TLV pane.)
\TLV
   //
   // Program for MYTH Workshop to test RV32I
   // Add 1,2,3,...,9 (in that order).
   //
   // Regs:
   //  r10 (a0): In: 0, Out: final sum
   //  r12 (a2): 10
   //  r13 (a3): 1..10
   //  r14 (a4): Sum
   // 
   // External to function:
   m4_asm(ADD, r10, r0, r0)             // Initialize r10 (a0) to 0.
   // Function:
   m4_asm(ADD, r14, r10, r0)            // Initialize sum register a4 with 0x0
   m4_asm(ADDI, r12, r10, 1010)         // Store count of 10 in register a2.
   m4_asm(ADD, r13, r10, r0)            // Initialize intermediate sum register a3 with 0
   // Loop:
   m4_asm(ADD, r14, r13, r14)           // Incremental addition
   m4_asm(ADDI, r13, r13, 1)            // Increment intermediate register by 1
   m4_asm(BLT, r13, r12, 1111111111000) // If a3 is less than a2, branch to label named <loop>
   m4_asm(ADD, r10, r14, r0)            // Store final result to register a0 so that it can be read by main program
   m4_asm(SW, r0, r10, 100)
   m4_asm(LW, r15, r0, 100)
   m4_define_hier(['M4_IMEM'], M4_NUM_INSTRS)
   
   |cpu
      @0
         $reset = *reset;
         
         //Initialising the program counter on the basis of the following conditions
         $pc[31:0] = >>1$reset ? 0 : 
                     >>3$valid_taken_br ? (>>3$br_tgt_pc[31:0]) :
                     >>3$valid_load ? >>3$inc_pc:
                     >>2$is_jal ? >>3$br_tgt_pc :
                     >>2$is_jalr ? >>3$jalr_tgt_pc :
                     >>1$inc_pc;
         // The conditions have been mentioned at later stages of the code.
         
         //$start is no longer required!
         //$start = (!$reset) && (>>1$reset);
         
      
      @1
         
         $imem_rd_en = !$reset;
         $imem_rd_addr[M4_IMEM_INDEX_CNT-1:0] = $pc[M4_IMEM_INDEX_CNT+1:2];
         
         //Increase the program counter by 4 units (1 byte)
         $inc_pc[31:0] = $pc[31:0]+32'd4;
         
         //Assigning the output of the IMEM macro to $instr. 32 bit wide Instruction.
         $instr[31:0] = $imem_rd_data;
         
         //Conditions to determine what type of instruction has been passed
         // The conditions have been taken from the data provided in the slides.
         $is_i_instr = $instr[6:2] ==? 5'b0000x ||
                       $instr[6:2] ==? 5'b001x0 ||
                       $instr[6:2] ==? 5'b11001;
         
         $is_r_instr = $instr[6:2] == 5'b01011 ||
                       $instr[6:2] ==? 5'b011x0 ||
                       $instr[6:2] == 5'b10100;
         
         $is_s_instr = $instr[6:2] ==? 5'b0100x;
         
         $is_u_instr = $instr[6:2] ==? 5'b0x101;
         
         $is_j_instr = $instr[6:2] == 5'b11011;
         
         $is_b_instr = $instr[6:2] == 5'b11000;
         
         // Expression to extract the value of the immediate from the instruction
         $imm[31:0] = $is_i_instr ? { {21{$instr[31]}}, $instr[30:20] } :
                      $is_s_instr ? { {21{$instr[31]}}, $instr[30:25], $instr[11:8], $instr[7] } :
                      $is_b_instr ? { {20{$instr[31]}}, $instr[7], $instr[30:25], $instr[11:8], 1'b0} :
                      $is_u_instr ? { $instr[31], $instr[30:20], $instr[19:12], {12{1'b0}} } :
                      $is_j_instr ? { {12{$instr[31]}}, $instr[19:12], $instr[20], $instr[30:25], $instr[24:21], 1'b0}: 32'b0;
         
         // Assigning the necessary fields, funct7, rs2, funct3, rs1, rd, opcode from the instruction
         $funct7_valid = $is_r_instr;
         ?$funct7_valid
            $funct7[6:0] = $instr[31:25];
         
         $rs2_valid = $is_r_instr || $is_s_instr || $is_b_instr;
         ?$rs2_valid
            $rs2[4:0] = $instr[24:20];
         
         $rs1_valid = $is_r_instr || $is_i_instr || $is_s_instr || $is_b_instr;
         ?$rs1_valid
            $rs1[4:0] = $instr[19:15];
         
         $funct3_valid = $is_r_instr || $is_i_instr || $is_s_instr || $is_b_instr;
         ?$funct3_valid
            $funct3[2:0] = $instr[14:12];
         
         $rd_valid = $is_r_instr || $is_i_instr || $is_u_instr || $is_j_instr;
         ?$rd_valid
            $rd[4:0] = $instr[11:7];
         
         $opcode[6:0] = $instr[6:0];
         
         // Test bench to check if the Simulation has passed. 
         // We compare the sum of 1 to 9 with the value stored in x10
         // x10 is the register we've stored our program's output in
         // If they're both equal, the simulation has passed!
         *passed = |cpu/xreg[15]>>10$value == (1+2+3+4+5+6+7+8+9);
         
      @2 
         //Concatenating funct7[5], funct3 and opcode to determine the bits to be decoded further.
         $dec_bits[10:0] = { $funct7[5], $funct3, $opcode };
         
         // Based on certain standards, determining which function/operation (equality, addition etc.) has been called.
         $is_beq = $dec_bits ==? 11'bx_000_1100011;
         $is_bne = $dec_bits ==? 11'bx_001_1100011;
         $is_blt = $dec_bits ==? 11'bx_100_1100011;
         $is_bge = $dec_bits ==? 11'bx_101_1100011;
         $is_bltu = $dec_bits ==? 11'bx_110_1100011;
         $is_bgeu = $dec_bits ==? 11'bx_111_1100011;
         $is_addi = $dec_bits ==? 11'bx_000_0010011;
         $is_add = $dec_bits ==? 11'b0_000_0110011;
         $is_lui = $dec_bits ==? 11'bx_xxx_0110111;
         $is_auipc = $dec_bits ==? 11'bx_xxx_0010111;
         $is_jal = $dec_bits ==? 11'bx_xxx_1101111;
         $is_jalr = $dec_bits ==? 11'bx_000_1100111;
         $is_load = $opcode == 7'b0000011;
         $is_sb = $dec_bits ==? 11'bx_000_0100011;
         $is_sh = $dec_bits ==? 11'bx_001_0100011;
         $is_sw = $dec_bits ==? 11'bx_010_0100011;
         $is_slti = $dec_bits ==? 11'bx_010_0010011;
         $is_sltiu = $dec_bits ==? 11'bx_011_0010011;
         $is_xori = $dec_bits ==? 11'bx_100_0010011;
         $is_ori = $dec_bits ==? 11'bx_110_0010011;
         $is_andi = $dec_bits ==? 11'bx_111_0010011;
         $is_slli = $dec_bits ==? 11'b0_001_0010011;
         $is_slrli = $dec_bits ==? 11'b0_101_0010011;
         $is_srai = $dec_bits ==? 11'b1_101_0010011;
         $is_sub = $dec_bits ==? 11'b1_000_0110011;
         $is_sll = $dec_bits ==? 11'b0_001_0110011;
         $is_slt = $dec_bits ==? 11'b0_010_0110011;
         $is_sltu = $dec_bits ==? 11'b0_011_0110011;
         $is_xor = $dec_bits ==? 11'b0_100_0110011;
         $is_srl = $dec_bits ==? 11'b0_101_0110011;
         $is_sra = $dec_bits ==? 11'b1_101_0110011;
         $is_or = $dec_bits ==? 11'b0_110_0110011;
         $is_and = $dec_bits ==? 11'b0_111_0110011;
         
         //Using this to avoid the Unassigned Error issue.
         `BOGUS_USE($is_beq $is_bne $is_blt $is_bge $is_bltu $is_bgeu $is_addi $is_add)
         // Reading from the register file macro
         $rf_rd_en1 = $rs1_valid;
         $rf_rd_en2 = $rs2_valid;
         
         $rf_rd_index1[4:0] = $rs1;
         $rf_rd_index2[4:0] = $rs2;
         
         // the following expression has been extended from the normal to solve the issue of read after write hazard
         // called Register File bypass
         $src1_value[31:0] = (>>1$rf_wr_index == $rf_rd_index1) && >>1$rf_wr_en ? >>1$result : $rf_rd_data1;
         $src2_value[31:0] = (>>1$rf_wr_index == $rf_rd_index2) && >>1$rf_wr_en ? >>1$result : $rf_rd_data2;
         
         // Program Counter passed to assert where the program should be based on the branch as selected by the instruction.
         $br_tgt_pc[31:0] = $pc + $imm;
         
         // Helps determine, based on the instruction, the point where the pc should 'jump' to.
         $jalr_tgt_pc[31:0] = $src1_value + $imm;
         
      @3
         // Computing the components of the Arithmatic Logic Unit
         
         
         //these two will be used in the result expression for $is_sltu and $is_sltiu
         $sltu_rslt = $src1_value < $src2_value;
         $sltiu_rslt = $src1_value < $imm;
         
         // Computing the result of the ALU, 32 bit wide
         
         $result[31:0] = $is_addi || $is_load || $is_s_instr ? $src1_value + $imm :
                         $is_add ? $src1_value + $src2_value :
                         $is_andi ? $src1_value & $imm : 
                         $is_ori ? $src1_value | $imm : 
                         $is_xori ? $src1_value ^ $imm : 
                         $is_slli ? $src1_value << $imm[5:0]:
                         $is_and ? $src1_value && $src2_value:
                         $is_or ? $src1_value || $src2_value:
                         $is_xor ? $src1_value ^ $src2_value:
                         $is_srai ? { {32{$src1_value[31]}}, $src1_value} >> $imm[4:0]:
                         $is_slt ? ($src1_value[31]==$src2_value[31]) ? $sltu_rslt : {31'b0, $src1_value[31]}:
                         $is_slti ? ($src1_value[31]==$imm[31]) ? $sltiu_rslt : {31'b0, $src1_value[31]}:
                         $is_sra ? {{32{$src1_value[31]}}, $src1_value} >> $src2_value[4:0] :
                         $is_sub ? $src1_value - $src2_value :
                         $is_sll ? $src1_value << $src2_value[4:0] : 
                         $is_lui ? {$imm[31:12], 12'b0} : 
                         $is_auipc ? $pc + $imm :
                         $is_jal ? $pc + 32'd4:
                         $is_jalr ? $pc + 32'd4 : 
                         $is_srl ? $src1_value >> $src2_value[4:0] : 32'bx;
                         
                         
         
         // Performing the operations to write back to the register file
         $rf_wr_en = ($rd_valid && $rd != 5'b0 && $valid) || >>2$valid_load;
         $rf_wr_index[4:0] = >>2$valid_load ? >>2$rd : $rd ;
         $rf_wr_data[31:0] = >>2$valid_load ? >>2$ld_data : $result;
         
         // This expression helps choose which branch operation has been chosen as per the instruction passed to the system.
         $taken_br = ($is_beq && ($src1_value == $src2_value)) || 
                     ($is_bne && ($src1_value != $src2_value)) ||
                     ($is_blt && ($src1_value < $src2_value) ^ ($src1_value[31] != $src2_value[31])) ||
                     ($is_bge && ($src1_value >= $src2_value) ^ ($src1_value[31] != $src2_value[31])) ||
                     ($is_bltu && ($src1_value < $src2_value)) ||
                     ($is_bgeu && ($src1_value >= $src2_value));
         
         // Single bit variables that check the validity of passing the branch or load operation.
         $valid_taken_br = $valid && $taken_br;
         $valid_load = $valid && $is_load;
         
         // Checks the validity of the jump that's been initiated. 
         // Also plays an important role in the determination of where the PC will point to next.
         $jump_valid = $is_jump || $valid;
         
         // Computes the variable $valid which plays an important role in determining where the program counter will be directed to.
         $valid = !(>>1$valid_taken_br || >>2$valid_taken_br || >>1$valid_load || >>2$valid_load );
         
         // Checks if the instruction passed asks for a jump operation on the registers concerned or no
         $is_jump = $is_jal || $is_jalr;
         
         
      @4
         // Working on the Dynamic Memory DMEM macro
         
         //These are the inputs of DMEM which have been initialised to the respective values for the DMEM to perform its operations.
         $dmem_wr_en = $is_s_instr && $valid;
         $dmem_rd_en = $is_load;
         $dmem_wr_data[31:0] = $src2_value;
         $dmem_addr[3:0] = $result[5:2];
      
      @5
         // The output of the DMEM macro $dmem_rd_data is passed on to the $ld_data variable.
         
         // note to self "[31:0]" is very important
         
         $ld_data[31:0] = $dmem_rd_data;



      // YOUR CODE HERE
      // ...

      // Note: Because of the magic we are using for visualisation, if visualisation is enabled below,
      //       be sure to avoid having unassigned signals (which you might be using for random inputs)
      //       other than those specifically expected in the labs. You'll get strange errors for these.

   
   // Assert these to end simulation (before Makerchip cycle limit).
   //*passed = *cyc_cnt > 40;
   *failed = 1'b0;
   
   // Macro instantiations for:
   //  o instruction memory
   //  o register file
   //  o data memory
   //  o CPU visualization
   |cpu
      // Actiavting the 4 macros that have been provided
      m4+imem(@1)    // Args: (read stage)
      m4+rf(@2, @3)  // Args: (read stage, write stage) - if equal, no register bypass is required
      m4+dmem(@4)    // Args: (read/write stage)
   
   m4+cpu_viz(@4)    // For visualisation, argument should be at least equal to the last stage of CPU logic
                       // @4 would work for all labs
\SV
   endmodule
